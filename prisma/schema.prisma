generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Users {
  id String @default(uuid()) @id
  name String
  email String @unique
  password String
  role Role @default(USER)
  isVerificate Boolean
  adress String?
  age Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assessments Assessment[]
  cart Cart[]
}

model Cart {
  id Int @id @default(autoincrement())
  User Users? @relation(fields: [idUser], references: [id] ,onDelete: Cascade) 
  idUser String
  Products Products? @relation(fields: [idProduct], references: [id] ,onDelete: Cascade)
  idProduct Int
}

model Admins {
  id String @default(uuid()) @id
  name String
  email String @unique
  password String
  role Role @default(ADMIN)
  isVerificate Boolean
}

model Categories {
  id Int @id @default(autoincrement())
  name String
  products CategoriesProducts[]
}

model CategoriesProducts {
  id Int @id @default(autoincrement())
  Categories Categories @relation(fields: [idCategorie], references: [id] ,onDelete: Cascade)
  idCategorie Int
  Products Products @relation(fields: [idProduct], references: [id] ,onDelete: Cascade)
  idProduct Int
}

model Assessment {
  id Int @id @default(autoincrement())
  rating Int @db.SmallInt
  comment String @db.VarChar(240)
  User Users @relation(fields: [idUser], references: [id] ,onDelete: Cascade)
  idUser String
  Product Products @relation(fields: [idProduct], references: [id] ,onDelete: Cascade)
  idProduct Int
}

model Products {
  id Int @id @default(autoincrement())
  name String
  description String
  photo Bytes
  price Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories CategoriesProducts[]
  assessment Assessment[]
  carts Cart[]
}